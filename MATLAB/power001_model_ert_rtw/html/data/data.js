var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"power001_model","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"E:\\Power001\\MATLAB\\power001_model_ert_rtw","tag":"","groupDisplay":"主文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'power001_model'.\r\n *\r\n * Model version                  : 1.13\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu May 16 19:06:20 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"power001_model.h\"            /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  power001_model_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  power001_model_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.001 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (1) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  /* The option 'Remove error status field in real-time model data structure'\r\n   * is selected, therefore the following code does not need to execute.\r\n   */\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"power001_model.c","type":"source","group":"model","path":"E:\\Power001\\MATLAB\\power001_model_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: power001_model.c\r\n *\r\n * Code generated for Simulink model 'power001_model'.\r\n *\r\n * Model version                  : 1.13\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu May 16 19:06:20 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"power001_model.h\"\r\n#include \"rtwtypes.h\"\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\n\r\n/* Model step function */\r\nvoid power001_model_step(void)\r\n{\r\n  real32_T rtb_FilterCoefficient_f;\r\n  real32_T rtb_Sum_j;\r\n  real32_T u0;\r\n  real32_T u1;\r\n  real32_T u2;\r\n\r\n  /* SwitchCase: '<Root>/Switch Case' incorporates:\r\n   *  Inport: '<Root>/state'\r\n   */\r\n  switch ((int32_T)rtU.state) {\r\n   case 1:\r\n    /* Outputs for IfAction SubSystem: '<Root>/cv' incorporates:\r\n     *  ActionPort: '<S2>/Action Port'\r\n     */\r\n    /* Sum: '<S2>/Sum' incorporates:\r\n     *  Inport: '<Root>/v_tgt'\r\n     *  Inport: '<Root>/v_val'\r\n     */\r\n    rtb_Sum_j = rtU.v_tgt - rtU.v_val;\r\n\r\n    /* Gain: '<S87>/Filter Coefficient' incorporates:\r\n     *  DiscreteIntegrator: '<S79>/Filter'\r\n     *  Gain: '<S78>/Derivative Gain'\r\n     *  Sum: '<S79>/SumD'\r\n     */\r\n    rtb_FilterCoefficient_f = (rtP.kd_v * rtb_Sum_j - rtDW.Filter_DSTATE_m) *\r\n      100.0F;\r\n\r\n    /* Sum: '<S93>/Sum' incorporates:\r\n     *  DiscreteIntegrator: '<S84>/Integrator'\r\n     *  Gain: '<S89>/Proportional Gain'\r\n     */\r\n    u0 = (rtP.kp_v * rtb_Sum_j + rtDW.Integrator_DSTATE_n) +\r\n      rtb_FilterCoefficient_f;\r\n\r\n    /* Saturate: '<S91>/Saturation' */\r\n    if (u0 > 24480.0F) {\r\n      u0 = 24480.0F;\r\n    } else if (u0 < 0.0F) {\r\n      u0 = 0.0F;\r\n    }\r\n\r\n    /* End of Saturate: '<S91>/Saturation' */\r\n\r\n    /* Saturate: '<S2>/Saturation' */\r\n    u1 = rtP.period_max * 0.01F;\r\n    u2 = (12000.0F / (rtP.v_in + 12000.0F) + 0.1F) * rtP.period_max;\r\n    if (u0 > u2) {\r\n      /* Outport: '<Root>/v_period_out' */\r\n      rtY.v_period_out = u2;\r\n    } else if (u0 < u1) {\r\n      /* Outport: '<Root>/v_period_out' */\r\n      rtY.v_period_out = u1;\r\n    } else {\r\n      /* Outport: '<Root>/v_period_out' */\r\n      rtY.v_period_out = u0;\r\n    }\r\n\r\n    /* End of Saturate: '<S2>/Saturation' */\r\n\r\n    /* Update for DiscreteIntegrator: '<S79>/Filter' */\r\n    rtDW.Filter_DSTATE_m += 0.001F * rtb_FilterCoefficient_f;\r\n\r\n    /* Update for DiscreteIntegrator: '<S84>/Integrator' incorporates:\r\n     *  Gain: '<S81>/Integral Gain'\r\n     */\r\n    rtDW.Integrator_DSTATE_n += rtP.ki_v * rtb_Sum_j * 0.001F;\r\n\r\n    /* End of Outputs for SubSystem: '<Root>/cv' */\r\n    break;\r\n\r\n   case 2:\r\n    /* Outputs for IfAction SubSystem: '<Root>/cc' incorporates:\r\n     *  ActionPort: '<S1>/Action Port'\r\n     */\r\n    /* Sum: '<S1>/Sum' incorporates:\r\n     *  Inport: '<Root>/i_tgt'\r\n     *  Inport: '<Root>/i_val'\r\n     */\r\n    rtb_Sum_j = rtU.i_tgt - rtU.i_val;\r\n\r\n    /* Gain: '<S38>/Filter Coefficient' incorporates:\r\n     *  DiscreteIntegrator: '<S30>/Filter'\r\n     *  Gain: '<S29>/Derivative Gain'\r\n     *  Sum: '<S30>/SumD'\r\n     */\r\n    rtb_FilterCoefficient_f = (rtP.kd_i * rtb_Sum_j - rtDW.Filter_DSTATE) *\r\n      100.0F;\r\n\r\n    /* Sum: '<S44>/Sum' incorporates:\r\n     *  DiscreteIntegrator: '<S35>/Integrator'\r\n     *  Gain: '<S40>/Proportional Gain'\r\n     */\r\n    u0 = (rtP.kp_i * rtb_Sum_j + rtDW.Integrator_DSTATE) +\r\n      rtb_FilterCoefficient_f;\r\n\r\n    /* Saturate: '<S42>/Saturation' */\r\n    if (u0 > 24480.0F) {\r\n      u0 = 24480.0F;\r\n    } else if (u0 < 0.0F) {\r\n      u0 = 0.0F;\r\n    }\r\n\r\n    /* End of Saturate: '<S42>/Saturation' */\r\n\r\n    /* Saturate: '<S1>/Saturation' */\r\n    u1 = rtP.period_max * 0.01F;\r\n    u2 = (12000.0F / (rtP.v_in + 12000.0F) + 0.1F) * rtP.period_max;\r\n    if (u0 > u2) {\r\n      /* Outport: '<Root>/i_period_out' */\r\n      rtY.i_period_out = u2;\r\n    } else if (u0 < u1) {\r\n      /* Outport: '<Root>/i_period_out' */\r\n      rtY.i_period_out = u1;\r\n    } else {\r\n      /* Outport: '<Root>/i_period_out' */\r\n      rtY.i_period_out = u0;\r\n    }\r\n\r\n    /* End of Saturate: '<S1>/Saturation' */\r\n\r\n    /* Update for DiscreteIntegrator: '<S30>/Filter' */\r\n    rtDW.Filter_DSTATE += 0.001F * rtb_FilterCoefficient_f;\r\n\r\n    /* Update for DiscreteIntegrator: '<S35>/Integrator' incorporates:\r\n     *  Gain: '<S32>/Integral Gain'\r\n     */\r\n    rtDW.Integrator_DSTATE += rtP.ki_i * rtb_Sum_j * 0.001F;\r\n\r\n    /* End of Outputs for SubSystem: '<Root>/cc' */\r\n    break;\r\n  }\r\n\r\n  /* End of SwitchCase: '<Root>/Switch Case' */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid power001_model_initialize(void)\r\n{\r\n  /* (no initialization code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"power001_model.h","type":"header","group":"model","path":"E:\\Power001\\MATLAB\\power001_model_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: power001_model.h\r\n *\r\n * Code generated for Simulink model 'power001_model'.\r\n *\r\n * Model version                  : 1.13\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu May 16 19:06:20 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_power001_model_h_\r\n#define RTW_HEADER_power001_model_h_\r\n#ifndef power001_model_COMMON_INCLUDES_\r\n#define power001_model_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* power001_model_COMMON_INCLUDES_ */\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real32_T Filter_DSTATE;              /* '<S30>/Filter' */\r\n  real32_T Integrator_DSTATE;          /* '<S35>/Integrator' */\r\n  real32_T Filter_DSTATE_m;            /* '<S79>/Filter' */\r\n  real32_T Integrator_DSTATE_n;        /* '<S84>/Integrator' */\r\n} DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real32_T state;                      /* '<Root>/state' */\r\n  real32_T v_tgt;                      /* '<Root>/v_tgt' */\r\n  real32_T v_val;                      /* '<Root>/v_val' */\r\n  real32_T i_tgt;                      /* '<Root>/i_tgt' */\r\n  real32_T i_val;                      /* '<Root>/i_val' */\r\n} ExtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real32_T v_period_out;               /* '<Root>/v_period_out' */\r\n  real32_T i_period_out;               /* '<Root>/i_period_out' */\r\n} ExtY;\r\n\r\n/* Parameters (default storage) */\r\nstruct P_ {\r\n  real32_T kd_i;                       /* Variable: kd_i\r\n                                        * Referenced by: '<S29>/Derivative Gain'\r\n                                        */\r\n  real32_T kd_v;                       /* Variable: kd_v\r\n                                        * Referenced by: '<S78>/Derivative Gain'\r\n                                        */\r\n  real32_T ki_i;                       /* Variable: ki_i\r\n                                        * Referenced by: '<S32>/Integral Gain'\r\n                                        */\r\n  real32_T ki_v;                       /* Variable: ki_v\r\n                                        * Referenced by: '<S81>/Integral Gain'\r\n                                        */\r\n  real32_T kp_i;                       /* Variable: kp_i\r\n                                        * Referenced by: '<S40>/Proportional Gain'\r\n                                        */\r\n  real32_T kp_v;                       /* Variable: kp_v\r\n                                        * Referenced by: '<S89>/Proportional Gain'\r\n                                        */\r\n  real32_T period_max;                 /* Variable: period_max\r\n                                        * Referenced by:\r\n                                        *   '<S1>/Saturation'\r\n                                        *   '<S2>/Saturation'\r\n                                        */\r\n  real32_T v_in;                       /* Variable: v_in\r\n                                        * Referenced by:\r\n                                        *   '<S1>/Saturation'\r\n                                        *   '<S2>/Saturation'\r\n                                        */\r\n};\r\n\r\n/* Parameters (default storage) */\r\ntypedef struct P_ P;\r\n\r\n/* Block parameters (default storage) */\r\nextern P rtP;\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/* Model entry point functions */\r\nextern void power001_model_initialize(void);\r\nextern void power001_model_step(void);\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'power001_model'\r\n * '<S1>'   : 'power001_model/cc'\r\n * '<S2>'   : 'power001_model/cv'\r\n * '<S3>'   : 'power001_model/cc/PID Controller'\r\n * '<S4>'   : 'power001_model/cc/PID Controller/Anti-windup'\r\n * '<S5>'   : 'power001_model/cc/PID Controller/D Gain'\r\n * '<S6>'   : 'power001_model/cc/PID Controller/Filter'\r\n * '<S7>'   : 'power001_model/cc/PID Controller/Filter ICs'\r\n * '<S8>'   : 'power001_model/cc/PID Controller/I Gain'\r\n * '<S9>'   : 'power001_model/cc/PID Controller/Ideal P Gain'\r\n * '<S10>'  : 'power001_model/cc/PID Controller/Ideal P Gain Fdbk'\r\n * '<S11>'  : 'power001_model/cc/PID Controller/Integrator'\r\n * '<S12>'  : 'power001_model/cc/PID Controller/Integrator ICs'\r\n * '<S13>'  : 'power001_model/cc/PID Controller/N Copy'\r\n * '<S14>'  : 'power001_model/cc/PID Controller/N Gain'\r\n * '<S15>'  : 'power001_model/cc/PID Controller/P Copy'\r\n * '<S16>'  : 'power001_model/cc/PID Controller/Parallel P Gain'\r\n * '<S17>'  : 'power001_model/cc/PID Controller/Reset Signal'\r\n * '<S18>'  : 'power001_model/cc/PID Controller/Saturation'\r\n * '<S19>'  : 'power001_model/cc/PID Controller/Saturation Fdbk'\r\n * '<S20>'  : 'power001_model/cc/PID Controller/Sum'\r\n * '<S21>'  : 'power001_model/cc/PID Controller/Sum Fdbk'\r\n * '<S22>'  : 'power001_model/cc/PID Controller/Tracking Mode'\r\n * '<S23>'  : 'power001_model/cc/PID Controller/Tracking Mode Sum'\r\n * '<S24>'  : 'power001_model/cc/PID Controller/Tsamp - Integral'\r\n * '<S25>'  : 'power001_model/cc/PID Controller/Tsamp - Ngain'\r\n * '<S26>'  : 'power001_model/cc/PID Controller/postSat Signal'\r\n * '<S27>'  : 'power001_model/cc/PID Controller/preSat Signal'\r\n * '<S28>'  : 'power001_model/cc/PID Controller/Anti-windup/Passthrough'\r\n * '<S29>'  : 'power001_model/cc/PID Controller/D Gain/Internal Parameters'\r\n * '<S30>'  : 'power001_model/cc/PID Controller/Filter/Disc. Forward Euler Filter'\r\n * '<S31>'  : 'power001_model/cc/PID Controller/Filter ICs/Internal IC - Filter'\r\n * '<S32>'  : 'power001_model/cc/PID Controller/I Gain/Internal Parameters'\r\n * '<S33>'  : 'power001_model/cc/PID Controller/Ideal P Gain/Passthrough'\r\n * '<S34>'  : 'power001_model/cc/PID Controller/Ideal P Gain Fdbk/Disabled'\r\n * '<S35>'  : 'power001_model/cc/PID Controller/Integrator/Discrete'\r\n * '<S36>'  : 'power001_model/cc/PID Controller/Integrator ICs/Internal IC'\r\n * '<S37>'  : 'power001_model/cc/PID Controller/N Copy/Disabled'\r\n * '<S38>'  : 'power001_model/cc/PID Controller/N Gain/Internal Parameters'\r\n * '<S39>'  : 'power001_model/cc/PID Controller/P Copy/Disabled'\r\n * '<S40>'  : 'power001_model/cc/PID Controller/Parallel P Gain/Internal Parameters'\r\n * '<S41>'  : 'power001_model/cc/PID Controller/Reset Signal/Disabled'\r\n * '<S42>'  : 'power001_model/cc/PID Controller/Saturation/Enabled'\r\n * '<S43>'  : 'power001_model/cc/PID Controller/Saturation Fdbk/Disabled'\r\n * '<S44>'  : 'power001_model/cc/PID Controller/Sum/Sum_PID'\r\n * '<S45>'  : 'power001_model/cc/PID Controller/Sum Fdbk/Disabled'\r\n * '<S46>'  : 'power001_model/cc/PID Controller/Tracking Mode/Disabled'\r\n * '<S47>'  : 'power001_model/cc/PID Controller/Tracking Mode Sum/Passthrough'\r\n * '<S48>'  : 'power001_model/cc/PID Controller/Tsamp - Integral/TsSignalSpecification'\r\n * '<S49>'  : 'power001_model/cc/PID Controller/Tsamp - Ngain/Passthrough'\r\n * '<S50>'  : 'power001_model/cc/PID Controller/postSat Signal/Forward_Path'\r\n * '<S51>'  : 'power001_model/cc/PID Controller/preSat Signal/Forward_Path'\r\n * '<S52>'  : 'power001_model/cv/PID Controller'\r\n * '<S53>'  : 'power001_model/cv/PID Controller/Anti-windup'\r\n * '<S54>'  : 'power001_model/cv/PID Controller/D Gain'\r\n * '<S55>'  : 'power001_model/cv/PID Controller/Filter'\r\n * '<S56>'  : 'power001_model/cv/PID Controller/Filter ICs'\r\n * '<S57>'  : 'power001_model/cv/PID Controller/I Gain'\r\n * '<S58>'  : 'power001_model/cv/PID Controller/Ideal P Gain'\r\n * '<S59>'  : 'power001_model/cv/PID Controller/Ideal P Gain Fdbk'\r\n * '<S60>'  : 'power001_model/cv/PID Controller/Integrator'\r\n * '<S61>'  : 'power001_model/cv/PID Controller/Integrator ICs'\r\n * '<S62>'  : 'power001_model/cv/PID Controller/N Copy'\r\n * '<S63>'  : 'power001_model/cv/PID Controller/N Gain'\r\n * '<S64>'  : 'power001_model/cv/PID Controller/P Copy'\r\n * '<S65>'  : 'power001_model/cv/PID Controller/Parallel P Gain'\r\n * '<S66>'  : 'power001_model/cv/PID Controller/Reset Signal'\r\n * '<S67>'  : 'power001_model/cv/PID Controller/Saturation'\r\n * '<S68>'  : 'power001_model/cv/PID Controller/Saturation Fdbk'\r\n * '<S69>'  : 'power001_model/cv/PID Controller/Sum'\r\n * '<S70>'  : 'power001_model/cv/PID Controller/Sum Fdbk'\r\n * '<S71>'  : 'power001_model/cv/PID Controller/Tracking Mode'\r\n * '<S72>'  : 'power001_model/cv/PID Controller/Tracking Mode Sum'\r\n * '<S73>'  : 'power001_model/cv/PID Controller/Tsamp - Integral'\r\n * '<S74>'  : 'power001_model/cv/PID Controller/Tsamp - Ngain'\r\n * '<S75>'  : 'power001_model/cv/PID Controller/postSat Signal'\r\n * '<S76>'  : 'power001_model/cv/PID Controller/preSat Signal'\r\n * '<S77>'  : 'power001_model/cv/PID Controller/Anti-windup/Passthrough'\r\n * '<S78>'  : 'power001_model/cv/PID Controller/D Gain/Internal Parameters'\r\n * '<S79>'  : 'power001_model/cv/PID Controller/Filter/Disc. Forward Euler Filter'\r\n * '<S80>'  : 'power001_model/cv/PID Controller/Filter ICs/Internal IC - Filter'\r\n * '<S81>'  : 'power001_model/cv/PID Controller/I Gain/Internal Parameters'\r\n * '<S82>'  : 'power001_model/cv/PID Controller/Ideal P Gain/Passthrough'\r\n * '<S83>'  : 'power001_model/cv/PID Controller/Ideal P Gain Fdbk/Disabled'\r\n * '<S84>'  : 'power001_model/cv/PID Controller/Integrator/Discrete'\r\n * '<S85>'  : 'power001_model/cv/PID Controller/Integrator ICs/Internal IC'\r\n * '<S86>'  : 'power001_model/cv/PID Controller/N Copy/Disabled'\r\n * '<S87>'  : 'power001_model/cv/PID Controller/N Gain/Internal Parameters'\r\n * '<S88>'  : 'power001_model/cv/PID Controller/P Copy/Disabled'\r\n * '<S89>'  : 'power001_model/cv/PID Controller/Parallel P Gain/Internal Parameters'\r\n * '<S90>'  : 'power001_model/cv/PID Controller/Reset Signal/Disabled'\r\n * '<S91>'  : 'power001_model/cv/PID Controller/Saturation/Enabled'\r\n * '<S92>'  : 'power001_model/cv/PID Controller/Saturation Fdbk/Disabled'\r\n * '<S93>'  : 'power001_model/cv/PID Controller/Sum/Sum_PID'\r\n * '<S94>'  : 'power001_model/cv/PID Controller/Sum Fdbk/Disabled'\r\n * '<S95>'  : 'power001_model/cv/PID Controller/Tracking Mode/Disabled'\r\n * '<S96>'  : 'power001_model/cv/PID Controller/Tracking Mode Sum/Passthrough'\r\n * '<S97>'  : 'power001_model/cv/PID Controller/Tsamp - Integral/TsSignalSpecification'\r\n * '<S98>'  : 'power001_model/cv/PID Controller/Tsamp - Ngain/Passthrough'\r\n * '<S99>'  : 'power001_model/cv/PID Controller/postSat Signal/Forward_Path'\r\n * '<S100>' : 'power001_model/cv/PID Controller/preSat Signal/Forward_Path'\r\n */\r\n#endif                                 /* RTW_HEADER_power001_model_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"power001_model_data.c","type":"source","group":"data","path":"E:\\Power001\\MATLAB\\power001_model_ert_rtw","tag":"","groupDisplay":"数据文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: power001_model_data.c\r\n *\r\n * Code generated for Simulink model 'power001_model'.\r\n *\r\n * Model version                  : 1.13\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu May 16 19:06:20 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"power001_model.h\"\r\n\r\n/* Block parameters (default storage) */\r\nP rtP = {\r\n  /* Variable: kd_i\r\n   * Referenced by: '<S29>/Derivative Gain'\r\n   */\r\n  0.0F,\r\n\r\n  /* Variable: kd_v\r\n   * Referenced by: '<S78>/Derivative Gain'\r\n   */\r\n  0.0F,\r\n\r\n  /* Variable: ki_i\r\n   * Referenced by: '<S32>/Integral Gain'\r\n   */\r\n  1.0F,\r\n\r\n  /* Variable: ki_v\r\n   * Referenced by: '<S81>/Integral Gain'\r\n   */\r\n  1.0F,\r\n\r\n  /* Variable: kp_i\r\n   * Referenced by: '<S40>/Proportional Gain'\r\n   */\r\n  0.6F,\r\n\r\n  /* Variable: kp_v\r\n   * Referenced by: '<S89>/Proportional Gain'\r\n   */\r\n  0.6F,\r\n\r\n  /* Variable: period_max\r\n   * Referenced by:\r\n   *   '<S1>/Saturation'\r\n   *   '<S2>/Saturation'\r\n   */\r\n  27200.0F,\r\n\r\n  /* Variable: v_in\r\n   * Referenced by:\r\n   *   '<S1>/Saturation'\r\n   *   '<S2>/Saturation'\r\n   */\r\n  5000.0F\r\n};\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"E:\\Power001\\MATLAB\\power001_model_ert_rtw","tag":"","groupDisplay":"实用工具文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'power001_model'.\r\n *\r\n * Model version                  : 1.13\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu May 16 19:06:20 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-M\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};